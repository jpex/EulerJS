/**
 * Highly divisible triangular number
 * Problem 12
 *
 *   The sequence of triangle numbers is generated by adding the natural 
 *   numbers. So the 7th triangle number would be 
 *   1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
 *
 *     1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 *
 *   Let us list the factors of the first seven triangle numbers:
 *
 *     1:  1
 *     3:  1,3
 *     6:  1,2,3,6
 *     10: 1,2,5,10
 *     15: 1,3,5,15
 *     21: 1,3,7,21
 *     28: 1,2,4,7,14,28
 *
 *   We can see that 28 is the first triangle number to have over five divisors.
 *   What is the value of the first triangle number to have over five hundred divisors?
 *
 * Excerpt: https://projecteuler.net/problem=12
**/

(function() {
  var triangleNumber = 0
    , array          = []
    , limit          = 20000000000
    , temp           = 0
    , desired        = 500
    , answer         = 0
    , i
    ;

  for(i=1; i<=13000; i++) {
    triangleNumber = triangleNumber + i;
    array[i-1] = triangleNumber; 
  }

  for (i=desired; i<array.length; i=i+desired) {
    temp = getLargeFactorsCount(array[i]);
    if (temp >= desired) { answer = findFactorsRange(i - desired, i); break; }
  }

  function findFactorsRange(min, max) {
    var temp = 0;
    for (i=min; i<=max; i++) {
      temp = getLargeFactorsCount(array[i]);
      if (temp >= desired) { return array[i]; }
    }
    return "Error: not found in specified range.";
  }

  console.log(answer);

  function getLargeFactorsCount(count) {
    var occurrences = 0, progress = 0, i = 0;

    /**
     * To reduce calculations, these IF and FOR are used to see if
     * it is worth the effort to loop through the entire count/limit.
    **/

    if (desired > count) { return 0; }
    if (count % 2 !== 0 && count % 3 !== 0) { return 0; }
    for (i = 1; i <= 15; i++) { if (count % i == 0) progress++; }
    if (progress < 4) { return 0; }

    /* Heavy lifting loop */
    for (i = 1; i <= count; i++) { 
      if (count % i == 0) { occurrences++; } 
    }
    return occurrences;
  }

})();
